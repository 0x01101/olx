// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum State {
  NEW
  USED
  BROKEN
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  username              String?                @unique
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  Account               Account?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Product       Product[]
  Notifications Notifications[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  image     String?    @db.LongText
  parent_id Int?
  parent    Category?  @relation("CategoryToCategory", fields: [parent_id], references: [id])
  children  Category[] @relation("CategoryToCategory")
  Product   Product[]

  @@index([parent_id])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String   @db.LongText
  price       Float
  image       String
  images      Images[]
  state       State    @default(USED)
  category_id Int
  category    Category @relation(fields: [category_id], references: [id])
  seller_id   String
  seller      User     @relation(fields: [seller_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Images {
  id        String  @id @default(cuid())
  productId String
  url       String  @db.LongText
  product   Product @relation(fields: [productId], references: [id])
}

model Notifications {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}
